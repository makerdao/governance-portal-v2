on:
  push:
    branches:
      - develop

name: Deploy to Staging

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      REGION: eu-west-3
      SERVICE_NAME: fountain-staging

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${SERVICE_NAME} --query taskDefinition > task-definition.json
 
    # At the moment we are always on "latest" tag anyway
    # but going to render a new task definition anyway
    - name: Render task definition
      id: render
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.SERVICE_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy task
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render.outputs.task-definition }}
        service: ${{ env.SERVICE_NAME }}
        cluster: ${{ env.SERVICE_NAME }}
        wait-for-service-stability: true
